################### HW1 #########################
###Question 1
profit = function (x){
  return((1500-100*x)*(1+.15*x))
}
x = seq(0,15,1)
plot(x,profit(x),type="o")
print(profit(5))


x = seq(1,15,1)
deriv = function(f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profit,x))

bisection = function(f,a,b,tol=0.0001){
  if (f(a)*f(b) > 0){
    return ("Boundary Conditions Not Met")
  }
  else{
    middle = a
    while (abs(f(middle))>tol){
      middle = (a+b)/2
      if (f(middle)*f(a)>0) (a = middle)
      else (b = middle)
      x=middle
      y=f(middle)
      ## if you want to "see" what happens at every step, take off the # of the next line ##
      #cat(sprintf("x-Val: %.4f ; f(x-val): %.4f\n",x,y))
    }
    return (middle)
  }
}
dProfit = function(x){deriv(profit,x)}
bisection(dProfit,0,15)

saleIncrease = seq(0.1,0.2,length.out = 11)
ans = array(0,length(saleIncrease))
for (i in 1:length(saleIncrease)){
  profit = function (x){
    return((1500-100*x)*(1+saleIncrease[i]*x))
  }
  dProfit = function(x){deriv(profit,x)}
  ans[i] = bisection(dProfit,-10,30)
}
print(ans)

plot(saleIncrease,ans,"o",xlab = "Percent Sale Increase for $100 rebate", ylab = "Amount of Rebate")


## Question 2
profit = function (x){
  return((0.65-0.01*x)*(200+7*x)-.60*x)
}
x = seq(0,20,1)
plot(x,profit(x),type="o")


x=seq(0,20)
deriv = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profit,x))

dProfit = function(x){deriv(profit,x)}
bisection(dProfit,4,20)


############### HW 2 ########################
####Question 4
r = 5/7
cost = function(x){500*(200/(r*(x+1)))+(18000+800*200/(r*(x+1)))*x+(200/(r*(x+1))>14)*(10000*(200/(r*(x+1))-14))}
cost = Vectorize(cost)
plot(x,cost(x),type="l")


deriv = function(f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
x = seq(8,12,.5)
plot(x,deriv(cost,x))

dCost = function(x){deriv(cost,x)}



bisection = function(f,a,b,tol=0.0001){
  if (f(a)*f(b) > 0){
    return ("Boundary Conditions Not Met")
  }
  else{
    middle = a
    while (abs(f(middle))>tol){
      middle = (a+b)/2
      if (f(middle)*f(a)>0) (a = middle)
      else (b = middle)
      x=middle
      y=f(middle)
      ## if you want to "see" what happens at every step, take off the # of the next line ##
      #cat(sprintf("x-Val: %.4f ; f(x-val): %.4f\n",x,y))
    }
    return (middle)
  }
}


bisection(dCost,8,12)
## answers is 11.28 crews

## sensitivity analysis on rate of cleaning
r = seq((3/7),(10/7),(1/7))
ans.time = array(0,length(r))
ans.cost = array(0,length(r))
for (i in 1:length(r)){
  cost = function(x){500*(200/(r[i]*(x+1)))+(18000+800*200/(r[i]*(x+1)))*x+(200/(r[i]*(x+1))>14)*(10000*(200/(r[i]*(x+1))-14))}
  dCost = function(x){deriv(cost,x)}
  ans.time[i] = bisection(dCost,6,15)
  ans.cost[i] = cost(ans.time[i])
}
result = data.frame(rate = r,time = ans.time, cost = ans.cost)
print(result)

##fine sensitivity
f = seq(8000,12000,1000)
r = 5/7
ans.crew = array(0,length(f))
ans.cost = array(0,length(f))
ans.days = arrau(0,length(f))
for (i in 1:length(f)){
  cost = function(x){500*(200/(r*(x+1)))+(18000+800*200/(r*(x+1)))*x+(200/(r*(x+1))>14)*(f[i]*(200/(r*(x+1))-14))}
  dCost = function(x){deriv(cost,x)}
  ans.crew[i] = bisection(dCost,6,15)
  ans.cost[i] = cost(ans.crew[i])
  ans.days[i] = 200/(r*(ans.crew[i]+1))
}
result = data.frame(fine = f,days = ans.days, cost = ans.cost, crew=ans.crew)
print(result)


### Problem 5
r = 0.08
K = 400000
growth = function(x){(r*x*(1-x/K))}
x = seq(70000,500000,10000)
plot(x,growth(x),type="l")
plot(x,deriv(growth,x))

dgrowth = function(x){deriv(growth,x)}
bisection(dgrowth,100,250000)
growth(200000)
8000/0.00001/200000

##problem 5 sensitivity
r = seq(0.05,0.11,length.out = 5)
ans.pop = array(0,length(r))
ans.rate = array(0,length(r))
for (i in 1:length(r)){
  growth = function(x){r[i]*x*(1-x/K)}
  dgrowth = function(x){deriv(growth,x)}
  ans.pop[i]=bisection(dgrowth,0,500000)
  ans.rate[i]=growth(ans.pop[i])/0.00001/ans.pop[i]
}
result2 = data.frame(rate = r, population = ans.pop, effort = ans.rate)
print(result2)

K = seq(200000,600000,100000)
r = 0.08
ans.pop = array(0,length(K))
ans.rate = array(0,length(K))
for (i in 1:length(K)){
  growth = function(x){r*x*(1-x/K[i])}
  dgrowth = function(x){deriv(growth,x)}
  ans.pop[i]=bisection(dgrowth,0,500000)
  ans.rate[i]=growth(ans.pop[i])/0.00001/ans.pop[i]
}
result3 = data.frame(MaxPop = K, population = ans.pop, effort = ans.rate)
print(result3)

##get a min out of dataframe code
##which command gives you the index
which(result3$population==min(result3$population))
##answer comes out with comma
result3[which(result3$population==min(result3$population)),]

################ HW 3#######################
library("ma391LZ")

deriv = function(f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}

newton = function(f,x0,N){
  dfunc = function(x){deriv(f,x)}
  i = 0
  while (i<N){
    x1 = x0 - (f(x0)/dfunc(x0))
    i = i + 1
    x0 = x1
  }
  return(x0)
}

bisection = function(f,a,b,tol=0.0001){
  if (f(a)*f(b) > 0){
    return ("Boundary Conditions Not Met")
  }
  else{
    middle = a
    while (abs(f(middle))>tol){
      middle = (a+b)/2
      if (f(middle)*f(a)>0) (a = middle)
      else (b = middle)
      x=middle
      y=f(middle)
      ## if you want to "see" what happens at every step, take off the # of the next line ##
      #cat(sprintf("x-Val: %.4f ; f(x-val): %.4f\n",x,y))
    }
    return (middle)
  }
}

##question 7a
profitRate = function (x){
  return(((0.65-0.01*x)*(200+5*x)-.45*x-100)/(90+x))
}

x = seq(0,20,1)
plot(x,profitRate(x),type="o")


x=seq(0,20)
deriv = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profitRate,x))

dProfitRate = function(x){deriv(profitRate,x)}
bisection(dProfitRate,0,20)
profitRate((4.53))
profitRate(4)
profitRate(5)

##Question 7b
g = seq(2,12,1)
ans.time = array(0,length(g))
ans.rate = array(0,length(g))

for (i in 1:length(g)){
  profitRate = function(x){return(((0.65-(0.01)*as.numeric(x))*(200+g[i]*as.numeric(x))-.45*as.numeric(x)-100)/(90+as.numeric(x)))}
  dProfitRate = function(x){deriv(profitRate,x)}
  ans.time[i]=bisection(dProfitRate,0,50)
  ans.rate[i]=profitRate(ans.time[i])
}
result = data.frame(growth_rate = g, profitRate = ans.rate, sellingDay = ans.time)
print(result)

g = seq(.005,.015,.001)
ans.time = array(0,length(g))
ans.rate = array(0,length(g))

##question 7c
for (i in 1:length(g)){
  profitRate = function(x){return(((0.65-(g[i])*as.numeric(x))*(200+5*as.numeric(x))-.45*as.numeric(x)-100)/(90+as.numeric(x)))}
  dProfitRate = function(x){deriv(profitRate,x)}
  ans.time[i]=bisection(dProfitRate,0,50)
  ans.rate[i]=profitRate(ans.time[i])
}
result = data.frame(priceDropPerDay = g, profitRate = ans.rate, sellingDay = ans.time)
print(result)


##question 8a
profit = function (x){
  return(((0.65-0.01*x)*((5*x-x^2/60)+200))-.45*x)
}

x = seq(0,20,1)
plot(x,profit(x),type="o")

weight = function(x){(5*x-x^2/60)+200}
weight = function(x){(5*x-x^2/72)+200}
plot(x,weight(x))

x=seq(0,200)
deriv = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profit,x))

dProfit = function(x){deriv(profit,x)}
bisection(dProfit,0,20)
profit(6.7626)
profit(7)
profit(6)

newton(dProfit,10,50)

d = seq(12,108,12)
ans.time = array(0,length(d))
ans.rate = array(0,length(d))
for (i in 1:length(d)){
  profit = function (x){
    return(((0.65-0.01*x)*((5*x-x^2/d[i])+200))-.45*x)
  }
  dProfit = function(x){deriv(profit,x)}
  ans.time[i] = bisection(dProfit,0,20)
  ans.rate[i] = profit(ans.time[i])
}

result = data.frame(timeToMature = d/12, profit = ans.rate, sellingDay = ans.time)
print(result)

################ HW 3 #####################
library("ma391LZ")

deriv = function(f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}

newton = function(f,x0,N){
  dfunc = function(x){deriv(f,x)}
  i = 0
  while (i<N){
    x1 = x0 - (f(x0)/dfunc(x0))
    i = i + 1
    x0 = x1
  }
  return(x0)
}

bisection = function(f,a,b,tol=0.0001){
  if (f(a)*f(b) > 0){
    return ("Boundary Conditions Not Met")
  }
  else{
    middle = a
    while (abs(f(middle))>tol){
      middle = (a+b)/2
      if (f(middle)*f(a)>0) (a = middle)
      else (b = middle)
      x=middle
      y=f(middle)
      ## if you want to "see" what happens at every step, take off the # of the next line ##
      #cat(sprintf("x-Val: %.4f ; f(x-val): %.4f\n",x,y))
    }
    return (middle)
  }
}

##question 7a
profitRate = function (x){
  return(((0.65-0.01*x)*(200+5*x)-.45*x-100)/(90+x))
}

x = seq(0,20,1)
plot(x,profitRate(x),type="o")


x=seq(0,20)
deriv = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profitRate,x))

dProfitRate = function(x){deriv(profitRate,x)}
bisection(dProfitRate,0,20)
profitRate((4.53))
profitRate(4)
profitRate(5)

##Question 7b
g = seq(2,12,1)
ans.time = array(0,length(g))
ans.rate = array(0,length(g))

for (i in 1:length(g)){
  profitRate = function(x){return(((0.65-(0.01)*as.numeric(x))*(200+g[i]*as.numeric(x))-.45*as.numeric(x)-100)/(90+as.numeric(x)))}
  dProfitRate = function(x){deriv(profitRate,x)}
  ans.time[i]=bisection(dProfitRate,0,50)
  ans.rate[i]=profitRate(ans.time[i])
}
result = data.frame(growth_rate = g, profitRate = ans.rate, sellingDay = ans.time)
print(result)

g = seq(.005,.015,.001)
ans.time = array(0,length(g))
ans.rate = array(0,length(g))

##question 7c
for (i in 1:length(g)){
  profitRate = function(x){return(((0.65-(g[i])*as.numeric(x))*(200+5*as.numeric(x))-.45*as.numeric(x)-100)/(90+as.numeric(x)))}
  dProfitRate = function(x){deriv(profitRate,x)}
  ans.time[i]=bisection(dProfitRate,0,50)
  ans.rate[i]=profitRate(ans.time[i])
}
result = data.frame(priceDropPerDay = g, profitRate = ans.rate, sellingDay = ans.time)
print(result)


##question 8a
profit = function (x){
  return(((0.65-0.01*x)*((5*x-x^2/60)+200))-.45*x)
}

x = seq(0,20,1)
plot(x,profit(x),type="o")

weight = function(x){(5*x-x^2/60)+200}
weight = function(x){(5*x-x^2/72)+200}
plot(x,weight(x))

x=seq(0,200)
deriv = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}
plot(x,deriv(profit,x))

dProfit = function(x){deriv(profit,x)}
bisection(dProfit,0,20)
profit(6.7626)
profit(7)
profit(6)

newton(dProfit,10,50)

d = seq(12,108,12)
ans.time = array(0,length(d))
ans.rate = array(0,length(d))
for (i in 1:length(d)){
  profit = function (x){
    return(((0.65-0.01*x)*((5*x-x^2/d[i])+200))-.45*x)
  }
  dProfit = function(x){deriv(profit,x)}
  ans.time[i] = bisection(dProfit,0,20)
  ans.rate[i] = profit(ans.time[i])
}

result = data.frame(timeToMature = d/12, profit = ans.rate, sellingDay = ans.time)
print(result)

############### HW 4 #######################
##gradient, hessian, jacobian code

gradient(f, x, centered = FALSE, pert = 1e-8, ...)

hessian()

jacobian.full()

###Question 1

##a
growth = function(x){return(((.05*x[1]*(1-(x[1]/150000)))
    +(.08*x[2]*(1-(x[2]/400000)))
    -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
x = c(80000,150000)
ans = optim(x,growth,method="BFGS")
print(ans)
paste(c("Growth is maximized at:",round(ans$par[1])," blue whales and ",
        round(ans$par[2])," fin whales. Resulting in a total gorwth of: ",
        format(round(-growth(ans$par)),big.mark=",")),collapse="")
growth(ans$par)
##b

##r1 sensitivity anlysis
Rsens = function(r){
  growth = function(x){(((r*x[1]*(1-(x[1]/150000)))
                               +(.08*x[2]*(1-(x[2]/400000)))
                               -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,growth,method="BFGS")
  return(ans)
}
r = seq(0.01,0.09,length.out = 9)
ans.x1 = 0
ans.x2 = 0
ans.growth = 0

for(i in 1:length(r)){
  ans = Rsens(r[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.growth[i]= -ans$value
}
result = data.frame(r=r,x1=ans.x1,x2=ans.x2,growth=format(ans.growth,big.mark=","))
print(result)
plot(r,ans.x1,xlim=c(0,0.1),ylim=c(60000,200000),type="l",ylab="optimum x1/x2",main="Figure 2.5/2.6 Book",
     xaxs="i", yaxs="i",col="blue")
lines(r,ans.x2,col="red")
legend("topleft",legend=c("x1","x2"),lty=1,col=c("blue","red"))
grid(lwd=2, nx=4, ny=10)

##r2 sensitivity anlysis
Rsens = function(r){
  growth = function(x){(((.05*x[1]*(1-(x[1]/150000)))
                         +(r*x[2]*(1-(x[2]/400000)))
                         -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,growth,method="BFGS")
  return(ans)
}
r = seq(0.04,0.12,length.out = 9)
ans.x1 = 0
ans.x2 = 0
ans.growth = 0

for(i in 1:length(r)){
  ans = Rsens(r[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.growth[i]= -ans$value
}
result = data.frame(r=r,x1=ans.x1,x2=ans.x2,growth=format(ans.growth,big.mark=","))
print(result)
plot(r,ans.x1,xlim=c(0,0.1),ylim=c(60000,200000),type="l",ylab="optimum x1/x2",main="Figure 2.5/2.6 Book",
     xaxs="i", yaxs="i",col="blue")
lines(r,ans.x2,col="red")
legend("topleft",legend=c("x1","x2"),lty=1,col=c("blue","red"))
grid(lwd=2, nx=4, ny=10)

##c
##k1 sensitivity
Ksens = function(k){
  growth = function(x){(((.05*x[1]*(1-(x[1]/k)))
                         +(.08*x[2]*(1-(x[2]/400000)))
                         -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,growth,method="BFGS")
  return(ans)
}
k = seq(100000,200000,10000)
ans.x1 = 0
ans.x2 = 0
ans.growth = 0

for(i in 1:length(k)){
  ans = Ksens(k[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.growth[i]= -ans$value
}
result = data.frame(k=k,x1=ans.x1,x2=ans.x2,growth=format(ans.growth,big.mark=","))
print(result)
plot(k,ans.x1,xlim=c(90000,210000),ylim=c(40000,200000),type="l",ylab="optimum x1/x2",main="Figure 2.5/2.6 Book",
     xaxs="i", yaxs="i",col="blue")
lines(k,ans.x2,col="red")
legend("topleft",legend=c("x1","x2"),lty=1,col=c("blue","red"))
grid(lwd=2, nx=4, ny=10)
##k2 sensitivity
Ksens = function(k){
  growth = function(x){(((.05*x[1]*(1-(x[1]/150000)))
                         +(.08*x[2]*(1-(x[2]/k)))
                         -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,growth,method="BFGS")
  return(ans)
}
k = seq(350000,450000,10000)
ans.x1 = 0
ans.x2 = 0
ans.growth = 0

for(i in 1:length(k)){
  ans = Ksens(k[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.growth[i]= -ans$value
}
result = data.frame(k=k,x1=ans.x1,x2=ans.x2,growth=format(ans.growth,big.mark=","))
print(result)
plot(k,ans.x1,xlim=c(340000,460000),ylim=c(40000,220000),type="l",ylab="optimum x1/x2",main="Figure 2.5/2.6 Book",
     xaxs="i", yaxs="i",col="blue")
lines(k,ans.x2,col="red")
legend("topleft",legend=c("x1","x2"),lty=1,col=c("blue","red"))
grid(lwd=2, nx=4, ny=10)
###Question 3
revenue = function(x){return((12*(.05*x[1]*(1-x[1]/150000))
                             +6*(.08*x[2]*(1-x[2]/400000))
                             -2/100000000*x[1]*x[2])*(-1))
}
Rev = function(x){(12*(0.05*x[1]*(1-x[1]/150000)-1/100000000*x[1]*x[2]) +
                     6*(0.08*x[2]*(1-x[2]/400000)-1/100000000*x[1]*x[2]))*(-1)}
x = c(80000,150000)
ans = optim(x,revenue,method="L-BFGS-B")
print(ans)
##r1 sensitivity anlysis
Rsens = function(r){
  revenue = function(x){return((12000*(r*x[1]*(1-(x[1]/150000)))
                                +6000*(.08*x[2]*(1-(x[2]/400000)))
                                -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,revenue,method="BFGS")
  return(ans)
}
r = seq(0.01,0.09,length.out = 9)
ans.x1 = 0
ans.x2 = 0
ans.revenue = 0

for(i in 1:length(r)){
  ans = Rsens(r[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.revenue[i]= -ans$value
}
result = data.frame(r=r,x1=ans.x1,x2=ans.x2,revenue=format(ans.revenue,big.mark=","))
print(result)


##r2 sensitivity anlysis
Rsens = function(r){
  revenue = function(x){return((12000*(.05*x[1]*(1-(x[1]/150000)))
                                +6000*(r*x[2]*(1-(x[2]/400000)))
                                -((((10^(-8))*x[1]*x[2]))*2))*(-1))
  }
  x = c(80000,150000)
  ans = optim(x,revenue,method="BFGS")
  return(ans)
}
r = seq(0.04,0.12,length.out = 9)
ans.x1 = 0
ans.x2 = 0
ans.revenue = 0

for(i in 1:length(r)){
  ans = Rsens(r[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.revenue[i]= -ans$value
}
result = data.frame(r=r,x1=ans.x1,x2=ans.x2,revenue=format(ans.revenue,big.mark=","))
print(result)


################# HW 5 ####################
##question 5

P = function(x){
  return(((339-0.01*x[1]-0.003*x[2])*x[1]
          +(399-0.004*x[1]-0.01*x[2])*x[2]
          -(400000+195*x[1]+225*x[2]+x[1]*25+x[2]*25))*-1)
}

x=c(500,500) #starting point for optimization
ans = optim(x,P,method="BFGS") #BFGS is a numerical technique used to incrementally calculate the Hessian for Newton
print(ans)


##they sell 3809 19in and 6116 21 in TVs. This means $248125 goes to the tarrif and 23172 is from loss of sales

P = function(x){
  return(((339-0.01*x[1]-0.003*x[2])*x[1]
          +(399-0.004*x[1]-0.01*x[2])*x[2]
          -(400000+195*x[1]+225*x[2]))*-1)
}

(3809+6116)*25
553641-248125-282344

### b) it would not be worth coming to US. It would cost $350,000 a year to be in the US and avoiding the tariff and regaining sales does not cover 300k
### c)
P = function(a){
  f = function(x){
    return(((339-0.01*x[1]-0.003*x[2])*x[1]
            +(399-0.004*x[1]-0.01*x[2])*x[2]
            -(400000+195*x[1]+225*x[2]+x[1]*a+x[2]*a))*-1)
  }
  x = c(4700,7042)
  ans = optim(x,f,method="BFGS")
  ## Choose which of these that we will return ##
}

a = seq(20,40,1)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = P(a[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.profit[i] = -ans$value
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)

##a $33.20 tariif will make it worth for this specific company to move
a = seq(33,34,.1)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = P(a[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.profit[i] = -ans$value
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)
## Once the profit is big enough, the actual size does not affect production levels drastically, but every dollar it increases by reduces profits by $9k

##question 7

profit = function(x){
  return((((1.5+0.1*x[1])*(80000-5000*x[1]-1000*x[2]))+(250+100*x[2])*(350-50*x[2]))*(-1))
}
x = c(5,5)
ans = optim(x,profit,method="BFGS")
print(ans)
##max profits occurs if they increase the subscription by .029 cents and raise the advertising costs by $209.
## b subscription loss assumption
prof = function(a){
  f = function(x){
    return((((1.5+0.1*x[1])*(80000-a*x[1]-1000*x[2]))+(250+100*x[2])*(350-50*x[2]))*(-1))
  }
  x = c(4700,7042)
  ans = optim(x,f,method="BFGS")
  ## Choose which of these that we will return ##
}
a = seq(3000,7000,500)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = prof(a[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.profit[i] = -ans$value
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)
### 50 pages a week assumption
prof = function(a){
  f = function(x){
    return((((1.5+0.1*x[1])*(80000-5000*x[1]-1000*x[2]))+(250+100*x[2])*(350-a*x[2]))*(-1))
  }
  x = c(4700,7042)
  ans = optim(x,f,method="BFGS")
  ## Choose which of these that we will return ##
}
a = seq(10,90,10)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = prof(a[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.profit[i] = -ans$value
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)
###d
##with this info you might as well raise your prices to $499 a page so that you are still the best option. 
################# HW 6 ####################
install.packages("NlcOptim")
install.packages("MASS")
library(MASS)
library(NlcOptim)
profit = function(x){
  ((x[1]*(10000+(950-x[1])*(5000/100)+200*x[2]))
  -700*(10000+(950-x[1])*(5000/100)+200*x[2])
  -(50000+10000*x[2]))*(-1)
}
x0 = c(1000,5)
A = matrix(c(0,0,-1,1,-1,0),nrow=3)
B = matrix(c(5,0,0),nrow=3)
print(A)
print(B)
solnl(x0,objfun=profit,A=A,B=B)
## answer price should be $935 and they should raising advertising to $100,000 
## for a total profit of $2661250

##sens for 50% assumption
profit = function(a){
  f = function(x){
    ((x[1]*(10000+(950-x[1])*(a/100)+200*x[2]))
     -700*(10000+(950-x[1])*(a/100)+200*x[2])
     -(50000+10000*x[2]))*(-1)
  }
  x0 = c(1000,5)
  A = matrix(c(0,0,-1,1,-1,0),nrow=3)
  B = matrix(c(5,0,0),nrow=3)
  ans = solnl(x0,objfun=f,A=A,B=B)
}

a = seq(1000,9000,1000)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = profit(a[i])
  ans.x1[i]=ans$par[1][1]
  ans.x2[i]=ans$par[2][1]
  ans.profit[i] = -ans$fn
}

result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)

###d the $100,000 constraint is always hit meaning that the company might be able to make more money
### if they removed that cap

###8
profit = function(x){
  return((((1.5+0.1*x[1])*(80000-5000*x[1]-1000*x[2]))+(250+100*x[2])*(350-50*x[2]))*(-1))
}
x0 = c(5,5)
A = matrix(c(0,0,-1,1,-1,0),nrow=3)
B = matrix(c(1.5,0,0),nrow=3)
print(A)
print(B)
solnl(x0,objfun=profit,A=A,B=B)
###should raise price by 3.5 cents and raise advertising cost for page by $150
##for a profit of 227811

##sens for 5000 lost per .10 dollar increase
profit = function(a){
  f = function(x){
    return((((1.5+0.1*x[1])*(80000-a*x[1]-1000*x[2]))+(250+100*x[2])*(350-50*x[2]))*(-1))
  }
  x0 = c(5,5)
  A = matrix(c(0,0,-1,1,-1,0),nrow=3)
  B = matrix(c(1.5,0,0),nrow=3)
  ans = solnl(x0,objfun=f,A=A,B=B)
}

a = seq(1000,9000,1000)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = profit(a[i])
  ans.x1[i]=ans$par[1][1]
  ans.x2[i]=ans$par[2][1]
  ans.profit[i] = -ans$fn
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)
### you should always max out advertising sales, but how much you increase shows sensitivity
################## HW 7 ###################
install.packages("lpSolve")
install.packages("NlcOptim")
install.packages("MASS")
library(MASS)
library(NlcOptim)
library(lpSolve)
#a
profit = function(x){
  ((1.5*(80000-1600*x[1])+250*(350-3.5*x[1]+52.5*x[2])) - ((80000-8000*x[1])+(30000+6000*x[2])+30000+60000)))*(-1)
}
x0 = c(2,3)
A = matrix(c(-1,1,0,0,0,0,1,-1),nrow=4)
B = matrix(c(5,0,5,0),nrow=4)
solnl(x0,objfun=profit,A=A,B=B)
###Do not decrease editorial costs at all, and increase sales to 50k

#b hopefully in class

#c
Outer = function(f,x){
  n1 = length(x[[1]])
  n2 = length(x[[2]])
  res = matrix(0,nrow=n1,ncol=n2)
  rownames(res) = x[[1]]
  colnames(res) = x[[2]]
  for (i in 1:n1){
    for (j in 1:n2){
      res[i,j]=f(c(x[[1]][[i]],x[[2]][[j]]))
    }
  }
  return(res)
}

X = list(x=seq(0,6,.1),y=seq(0,6,.1))
Z = Outer(profit,X)
print(Z)
contour(x=X$x,y=X$y,z=-Z,lwd=2)
abline(v=5,col="red",lwd=3) #line at x=5000
abline(h=5,col="red",lwd=3) #line at x=5000


###d sens for % drop
profit = function(a){
  f = function(x){
    ((1.5*(80000-1600*x[1]*a)+250*(350-3.5*x[1]*a+52.5*x[2])) - ((80000-8000*x[1])+(30000+6000*x[2])+30000+60000))*(-1)
  }
  x0 = c(2,3)
  A = matrix(c(-1,1,0,0,0,0,1,-1),nrow=4)
  B = matrix(c(5,0,5,0),nrow=4)
  ans = solnl(x0,objfun=f,A=A,B=B)
}

a = seq(1,2,.1)
ans.x1=0
ans.x2=0
ans.profit=0
for(i in 1:length(a)){
  ans = profit(a[i])
  ans.x1[i]=ans$par[1][1]
  ans.x2[i]=ans$par[2][1]
  ans.profit[i] = -ans$fn
}

result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","))
print(result)

##10a
f.obj = c(-30*250,-40*250,-50*250)
f.con = matrix(c(30,40,50,550*30,800*40,400*50),nrow=2,byrow=T)
f.dir = c("<=","<=")
f.rhs = c(100,50000)
ans = lp("min",f.obj,f.con,f.dir,f.rhs,compute.sens = T)
print(ans$solution)
print(ans$objval)
print(ans$duals)

############ LSN 2 #################
bisection = function(f,a,b,tol=0.0001){
  if (f(a)*f(b) > 0){
    return ("Boundary Conditions Not Met")
  }
  else{
    middle = a
    while (abs(f(middle))>tol){
      middle = (a+b)/2
      if (f(middle)*f(a)>0) (a = middle)
      else (b = middle)
      x=middle
      y=f(middle)
      ## if you want to "see" what happens at every step, take off the # of the next line ##
      #cat(sprintf("x-Val: %.4f ; f(x-val): %.4f\n",x,y))
    }
    return (middle)
  }
}

fPrime = function (f,a,h=0.0001){(f(a+h)-f(a-h))/(2*h)}

## Solve this problem
x = seq(0,20)
profit = function(t){(0.65-0.01*t)*(200+5*t)-0.45*t}
dProfit = function(x){fPrime(profit,x)}
ans = bisection(dProfit,0,20)
print(ans)
profit(8)

ans.time=0
ans.profit=0
r = seq(.008,.012,.001)
for (i in 1:length(r)){
  profit = function(t){(0.65-r[i]*t)*(200+5*t)-0.45*t}
  dProfit = function(x){fPrime(profit,x)}
  ans.time[i] = bisection(dProfit,0,20)
  ans.profit[i] =profit(ans.time[i]) 
}
result = data.frame(price=r,time=ans.time,profit=ans.profit)
print(result)


############ LSN 6 ################
profit = function(x){
  return(((x[1]*(600-3*x[1]+x[2]))+(x[2]*(800-2*x[2]-x[1]))-200*(600-3*x[1]+x[2])-300*(800-2*x[2]+x[1]))*(-1))
}


x=c(500,500) #starting point for optimization
ans = optim(x,profit,method="BFGS") #BFGS is a numerical technique used to incrementally calculate the Hessian for Newton
print(ans)

profit = function(a){
  f = function(x){
    return(((x[1]*(600-3*x[1]+x[2]))+(x[2]*(800-2*x[2]-x[1]))-200*(600-3*x[1]+x[2])-a*(800-2*x[2]+x[1]))*(-1))
  }
  x = c(4700,7042)
  ans = optim(x,f,method="BFGS")
  ## Choose which of these that we will return ##
}

a = seq(600,610,1)
ans.x1=0
ans.x2=0
ans.profit=0
ans.quant=0
for(i in 1:length(a)){
  ans = profit(a[i])
  ans.x1[i]=ans$par[1]
  ans.x2[i]=ans$par[2]
  ans.profit[i] = -ans$value
  ans.quant[i] = 800-2*ans$par[2]+ans$par[1]
}
result = data.frame(a=a,x1=ans.x1,x2=ans.x2,profit=format(ans.profit,big.mark=","),x1quant=ans.quant)
print(result)
############# LSN 7 ###################
library(MASS);library(NlcOptim)

Outer = function(f,x){
  n1 = length(x[[1]])
  n2 = length(x[[2]])
  res = matrix(0,nrow=n1,ncol=n2)
  rownames(res) = x[[1]]
  colnames(res) = x[[2]]
  for (i in 1:n1){
    for (j in 1:n2){
      res[i,j]=f(c(x[[1]][[i]],x[[2]][[j]]))
    }
  }
  return(res)
}

obj = function(x){
  10*x[1]^(0.6)*x[2]^(0.4)*(-1)
}

obj = function(x){
  ((1/2)*(x[1]-32)*x[2]^2)*(-1)
}

X = list(x=seq(0,20,.1),y=seq(0,20,.1))
Z = Outer(obj,X)
## This feasible region is an easy one to draw ###
contour(x=X$x,y=X$y,z=-Z,lwd=2)
abline(a=10,b=-5/3,col="red",lwd=3) #line at y=8000
#abline(v=5000,col="red",lwd=3) #line at x=5000
#abline(h=0,col="red",lwd=3) #line at y=0
#abline(v=0,col="red",lwd=3) #line at x=0
#abline(a=10000,b=-1,col="red",lwd=3) #line with y=bx+a; b is the slope, a is the y-intercept
pts = list(x=c(0,0,2000,5000,5000),y=c(0,8000,8000,5000,0)) #we need the intersection points for shading
polygon(pts$x,pts$y,density = 20,col="red") #this shades the feasible region red


contour(x=X$x,y=X$y,z=-Z,lwd=2,levels = c(20,37.55,60,80,100,120,140,160,180))
abline(a=10,b=-5/3,col="red",lwd=3)

x0 = c(20,20)
con=function(x){
  f=NULL
  f=rbind(f,x[1]^2*x[2]-10000)
  return(list(ceq=f,c=NULL))
}
ans = solnl(x0,objfun = obj, confun = con)
ans

############# LSN 8 #################

##########library(MASS);library(NlcOptim)

height = function(x){
  ((1/2)*(x[1]-32)*x[2]^2+(x[1]-32)*x[2]*x[3]-(1/2)*32*x[3]^2)*(-1)
}

x0 = c(20,20,20)
con=function(x){
  f=NULL
  f=rbind(f,x[1]^2*x[2]-10000)
  f=rbind(f,-32*x[3]+(x[1]-32)*x[2])
  return(list(ceq=f,c=NULL))
}
ans = solnl(x0,objfun = height, confun = con)
ans

obj = function(x){
  ((600-3*x[1]+x[2])*x[1]+(800-2*x[2]+x[1])*x[2])*(-1)
}
x0 = c(5,5)
con = function(x){
  f=NULL
  f=rbind(f,((x[1]-300)^2)+((x[2]-300)^2)-(200^2))
  return(list(ceq=f,c=NULL))
}

ans = solnl(x0,objfun = obj, confun = con)
ans

x0 = c(5,5)
A = matrix(c(12,5),nrow=1)
B = matrix(c(2500),nrow=1)
ans = solnl(x0,objfun=obj,A=A,B=B)
ans
##### lSN 9 #################

#########install.packages('NlcOptim');install.packages('MASS')
library(MASS);library(NlcOptim)
obj = function(x){
  (x[1]^2+x[2]^2)
}

con=function(x){
  f=NULL
  f=rbind(f,x[1]+2*x[2]-5)
  return(list(ceq=f,c=NULL))
}
ans = solnl(x0,objfun = obj, confun = con)
ans


obj = function(x){
  (x[1]^2-x[2]^2)*(-1)
}
x0 = c(1,1)
con=function(x){
  f=NULL
  f=rbind(f,x[1]^2-2*x[2])
  return(list(ceq=f,c=NULL))
}
ans = solnl(x0,objfun = obj, confun = con)
ans


obj = function(x){
  exp(-x[1]*x[2]/4)
}
x0 = c(-1,-1)
con = function(x){
  f=NULL
  f=rbind(f,x[1]^2+x[2]^2-1)
  return(list(ceq=f,c=NULL))
}
ans = solnl(x0,objfun = obj, confun = con)
ans

obj = function(x){
  (x[1]^2  + x[2]^2 + x[3]^2)*(-1)
}
x0 = c(1,1,1)
Aeq = matrix(c(1,0,2,1,1,0),nrow=2,byrow=T)
Beq = matrix(c(6,12),nrow=2)
A = matrix(c(-1,0,0,0,-1,0,0,0,-1),nrow=3,byrow=T)
B = matrix(c(0,0,0),nrow=3)
ans = solnl(x0,obj,Aeq=Aeq,Beq=Beq,A=A,B=B)
ans
A
B


obj = function(x){
  (-2*x[1]^2-x[2]^2+x[1]*x[2]+8*x[1]+3*x[2])*(-1)
}
x0=c(1,1)
Aeq=matrix(c(3000,1000),nrow = 1)
Beq=matrix(c(10000),nrow = 1)

ans = solnl(x0,objfun = obj,Aeq=Aeq,Beq=Beq)
ans
###### LSN 10 ################
library(MASS);library(NlcOptim)
P = function(x){
  return(((339-0.01*x[1]-0.003*x[2])*x[1]
          +(399-0.004*x[1]-0.01*x[2])*x[2]
          -(400000+195*x[1]+225*x[2]))*-1)
}
###Linear Inequality Constraitx0=c(1000,1000)
A = matrix(c(1,0,1,-1,0,0,1,1,0,-1),nrow=5) #defining this matrix is not intuitive - make sure we talk in class
B = matrix(c(5000,8000,10000,0,0),nrow=5)
print(A)
print(B)
solnl(x0,objfun=P,A=A,B=B)

###Third Constraint is binding, changing third constraint by one
###will cause obj func to increase by 24

###adding one to third constraint below
x0=c(1000,1000)
A = matrix(c(1,0,1,-1,0,0,1,1,0,-1),nrow=5) #defining this matrix is not intuitive - make sure we talk in class
B = matrix(c(5000,8000,10001,0,0),nrow=5)
print(A)
print(B)
solnl(x0,objfun=P,A=A,B=B)

###changed total from 532307 to 532331, difference of 24 like expected



